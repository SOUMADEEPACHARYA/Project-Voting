
<h3>AddBankAccount</h3>


@using (Html.BeginForm("AddBankAccount","BankAccount",FormMethod.Post))
{
@Html.AntiForgeryToken()

                <div class="form-horizontal">
                    <h4>Bank Account</h4>
                    <hr />
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    <div class="form-group">
                        @Html.LabelFor(model => model.AccountHolderName, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.AccountHolderName, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.AccountHolderName, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.PAN, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.PAN, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.PAN, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.City, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EnumDropDownListFor(model => model.City, htmlAttributes: new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Gender, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EnumDropDownListFor(model => model.Gender, htmlAttributes: new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.Gender, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.KYCComplete, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            <div class="checkbox">
                                @Html.EditorFor(model => model.KYCComplete)
                                @Html.ValidationMessageFor(model => model.KYCComplete, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Amount, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Amount, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Amount, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    

                    <div class="form-group">
                        @Html.LabelFor(model => model.OpeningDate, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.OpeningDate, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.OpeningDate, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-md-offset-2 col-md-10">
                            <input type="submit" value="Add Bank Account" class="btn btn-default" />
                        </div>
                    </div>
                </div>}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

_Layout.cshtml

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewBag.Title - My ASP.NET Application</title>
    @Styles.Render("~/Content/css")
    @Scripts.Render("~/bundles/modernizr")
</head>
<body>
    <div class="navbar navbar-inverse navbar-fixed-top">
        <div class="container">
            <div class="navbar-header">
                <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                </button>
                @Html.ActionLink("Bank Accounts Management", "Index", "Home", new { area = "" }, new { @class = "navbar-brand" })
            </div>
            <div class="navbar-collapse collapse">
                <ul class="nav navbar-nav">
                   
                    <li>@Html.ActionLink("Accounts List", "Index", "BankAccount")</li>
                    <li>@Html.ActionLink("Create New", "AddBankAccount", "BankAccount")</li>
                </ul>
            </div>
        </div>
    </div>
    <div class="container body-content">
        @RenderBody()
        <hr />
        <footer>
            <p>&copy; @DateTime.Now.Year - My ASP.NET Application</p>
        </footer>
    </div>

    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/bootstrap")
    @RenderSection("scripts", required: false)
</body>
</html




@model BankAccountsMgmt.Models.BankAccount

@{
    ViewBag.Title = "AddBankAccount";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h3>Create</h3>


@using (Html.BeginForm("AddBankAccount", "BankAccounts", FormMethod.Post))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Bank Account</h4>
        <hr />
        <div class="form-group">
            @Html.LabelFor(model => model.AccountHolderName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.AccountHolderName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.AccountHolderName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PAN, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PAN, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.PAN, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.City, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EnumDropDownListFor(model => model.City, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Gender, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EnumDropDownListFor(model => model.Gender, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Gender, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.KYCComplete, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.KYCComplete)
                    @Html.ValidationMessageFor(model => model.KYCComplete, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Amount, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Amount, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Amount, "", new { @class = "text-danger" })
            </div>
        </div>



        <div class="form-group">
            @Html.LabelFor(model => model.OpeningDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.OpeningDate, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.OpeningDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Add Bank Account" class="btn btn-default" />
            </div>
        </div>
    </div>}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}



















@model BankAccountsMgmt.Models.BankAccount

@{
    ViewBag.Title = "Details";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h4>@ViewBag.Message</h4>
<hr />

<div>

    <dl class="dl-horizontal">
        <dt>
            @Html.DisplayNameFor(model => model.AccountHolderName)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.AccountHolderName)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.PAN)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.PAN)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.City)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.City)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Gender)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Gender)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Amount)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Amount)
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.Interest)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Interest)
        </dd>


        <dt>
            @Html.DisplayNameFor(model => model.OpeningDate)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.OpeningDate)
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.KYCComplete)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.KYCComplete)
        </dd>

    </dl>
</div>

<p>

    @Html.ActionLink("Back to List", "Index")
</p>






﻿@model List<BankAccountsMgmt.Models.BankAccount>

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Bank Accounts List</h2>




@using (Html.BeginForm("Index", "BankAccounts"))
{
    <div class="form-check col-md-offset-8" align="center">
        @Html.CheckBox("KYCComplete", new { @name = "KYC", @id = "KYC" })
        <label class="form-check-label" for="KYC">
            KYC Complete ?
            <button id="Submit">KYC Complete ?</button>
        </label>
    </div>
    <table class="table">
        <tr>
            <th>
                Account Holder Name
            </th>
            <th>
                PAN Number
            </th>
            <th>
                City
            </th>
            <th>
                Gender
            </th>

            <th>
                Amount
            </th>
            <th>
                Interest Upto 30 Aug
            </th>
            <th>
                Opening Date
            </th>
            <th>
                KYC Complete?
            </th>
            <th></th>
        </tr>

        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.AccountHolderName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.PAN)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.City)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Gender)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Amount)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Interest)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.OpeningDate)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.KYCComplete)
                </td>

            </tr>
        }

    </table>
    <span id="total" class="form-check col-md-offset-6" align="center"><b>Interest Total = </b>@Model.Sum(model => model.Interest).ToString("#.##") </span>


















using BankAccountsMgmt.Data;
using BankAccountsMgmt.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;


namespace BankAccountsMgmt.Controllers
{
    [CustomFilters.CustomExceptionFilter]
    public class BankAccountsController : Controller
    {
        BankAccountDBContext db = new BankAccountDBContext();
        // GET
        public ActionResult Index()
        {
            //Implement your code 
            List<BankAccount> bank = db.BankAccounts.OrderBy(b=>b.City).ToList();
            return View(bank);
        }
        //Implement other action methods

        [HttpPost]
        public ActionResult Index(bool KYCComplete)
        {
            if (KYCComplete)
            {
                List<BankAccount> passports = db.BankAccounts.Where(p => p.KYCComplete == true).OrderBy(b => b.City).ToList();
                return View(passports);
            }
            return RedirectToAction("Index");
        }


        public ActionResult AddBankAccount()
        {
            return View();
        }

        [HttpPost]
        public ActionResult AddBankAccount(BankAccount bankAccount)
        {
            if (ModelState.IsValid)
            {
                bankAccount.CalculateInterest();
                db.BankAccounts.Add(bankAccount);
                db.SaveChanges();
                ViewBag.Message = "Bank Account added successfully!";
                return View("Details", bankAccount);
            }

            return View(bankAccount);
        }


    }
}





using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Web;

namespace BankAccountsMgmt.Models
{
    public enum City
    {
        Select,
        Chennai,
        Dehradun,
        Delhi,
        Hyderabad,
        Kolkata,
        Mumbai
    }

    public enum Gender
    {
        Select,
        Male,
        Female,
        Others
    }

    public class BankAccount
    {
        //Implement DataAnnotations 
        [Key]
        public int AccountID { get; set; }


        [Required(ErrorMessage = "Please Provide Account Holder Name")]
        [MaxLength(255)]
        [Display(Name = "Account Holder Name")]

        public string AccountHolderName { get; set; }


        [Required(ErrorMessage = "Please provide PAN Number")]
        [Display(Name = "PAN Number")]
        [RegularExpression("^([A-Za-z]){5}([0-9]){4}([A-Za-z]){1}$", ErrorMessage = "Please provide a valid PAN")]
        [MaxLength(10)]
        public string PAN { get; set; }


        [Required(ErrorMessage = "Please Select a City")]
        [Range(1, 6, ErrorMessage = "Please Select a City")]
        [Display(Name = "City")]
        public City City { get; set; }


        [Required(ErrorMessage = "Please Select Gender")]
        [Range(1, 3, ErrorMessage = "Please Select Gender")]
        [Display(Name = "Gender")]
        public Gender Gender { get; set; }


        [Display(Name = "KYC Complete?")]
        public bool KYCComplete { get; set; }


        [Required]
        [Display(Name = "Amount")]
        [Range(1000, 50000, ErrorMessage = "Should be between 1000 and 50000")]
        public int Amount { get; set; }



        [Required(ErrorMessage = "Please provide Opening Date")]
        [DataType(DataType.Date)]
        [DisplayFormat(DataFormatString = "{0:dd-MM-yy}", ApplyFormatInEditMode = true)]
        [Display(Name = "Opening Date")]

        public DateTime? OpeningDate { get; set; }


        [DisplayFormat(DataFormatString = "{0:0.00}", ApplyFormatInEditMode = true)]
        [Display(Name = "Interest Upto 30 Aug")]
        public double Interest { get; set; }

        public void CalculateInterest()
        {
            //Implement your code 
            Double rateInterest;
            DateTime dt1 = DateTime.Parse("30/08/2020");
            //second date
            DateTime dt2 = DateTime.Now;
            //Subtact dates
            TimeSpan ts = dt2-dt1;
            //result.
            double days = ts.TotalDays;
            if (Gender == Gender.Male)
            {
                rateInterest = 2.5;
            }
            else
            {
                rateInterest = 3.5;
            }
            Interest = (Amount * days * rateInterest) / (30 * 12 * 100);

        }
    }
}

